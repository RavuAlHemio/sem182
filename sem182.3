.\" sem182 manual page
.\" written by Ondrej Hosek
.\"
.TH SEM182 3 2012-01-22 sem182 E182
.SH NAME
seminit, semgrab, semrm, V, P \- semaphore convenience operations
.SH SYNOPSIS
.nf
.B #include <sem182.h>
.sp
.BI "int seminit(key_t " key ", int " semperm ", int " initval );
.BI "int semgrab(key_t " key );
.BI "int semrm(int " semid );

.BI "int V(int " semid );
.BI "int P(int " semid );
.fi
.sp
Link with \fI\-lsem182\fP.
.SH DESCRIPTION
The
.BR seminit ()
function creates a new semaphore with the given
.I key
and permissions as specified in
.IR semperm ,
and initializes it with the value of
.IR initval .
The function fails if a semaphore associated with
.I key
already exists.
.PP
The
.BR semgrab ()
function obtains the semaphore associated with the given
.IR key .
The function fails if a semaphore associated with
.I key
has not been created yet.
.PP
The
.BR semrm ()
function removes the semaphore identified by the given
.IR semid .
It fails if a semaphore with the given ID does not exist (or has
already been removed).
.PP
The
.BR V ()
function increments the value of the semaphore identified by
.I semid
atomically by one. If a process is waiting on the semaphore, this
process is unblocked; if multiple processes are waiting on it,
exactly one is unblocked; it is unspecified which.
.PP
The
.BR P ()
function attempts to decrement the value of the semaphore identified
by
.I semid
atomically by one. If the semaphore's value is already zero,
.BR P ()
blocks until the value becomes greater than zero, whereupon the
.BR P ()
function decrements it atomically and returns.
.SH "RETURN VALUE"
On success, the
.BR seminit ()
function returns the ID of the newly created semaphore; the
.BR semgrab ()
function returns the ID of the existing semaphore associated with
.IR key .
On error, these functions return \-1 and set
.I errno
to indicate the error.
.PP
The
.BR semrm ()
function returns 0 if the semaphore was successfully removed.
Otherwise, \-1 is returned and
.I errno
is set to indicate the error.
.PP
The
.BR V ()
and
.BR P ()
functions return 0 if the semaphore's value was successfully
adjusted. Otherwise, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
The
.BR seminit ()
function may fail and set
.I errno
for any of the errors specified for the routines
.BR semget (2)
and
.BR semctl (2).
.PP
The
.BR semgrab ()
function may fail and set
.I errno
for any of the errors specified for the routine
.BR semget (2).
.PP
The
.BR semrm ()
function may fail and set
.I errno
for any of the errors specified for the routine
.BR semctl (2).
.PP
The functions
.BR V ()
and
.BR P ()
may fail and set
.I errno
for any of the errors specified for the routine
.BR semop (2).
.SH NOTES
The function
.BR P ()
may be interrupted by a signal. It is important to check its return
value to ensure proper synchronization.
.PP
The command
.BR ipcs (1)
can be used to list, among other things, all active semaphores; its
companion,
.BR ipcrm (1),
to delete them.
.SH EXAMPLE
The following example demonstrates turn-by-turn synchronization of two
processes. The semaphores are created and destroyed by the server; the
first turn is made by the client.
.SS Server program
\&
.nf
#include <stdio.h>
#include <errno.h>
#include <sem182.h>

int main(void)
{
    int s1 = seminit(0xE1820, 0600, 0);
    if (s1 == -1) {
        perror("seminit(s1)");
        return 1;
    }

    int s2 = seminit(0xE1821, 0600, 1);
    if (s2 == -1) {
        perror("seminit(s2)");
        semrm(s1);
        return 1;
    }

    for (;;) {
        if (P(s1) != 0) {
            if (errno == EINTR) {
                /* interrupted by syscall, try again */
                continue;
            }
            perror("P(s1)");
            break;
        }

        /* critical section here */

        if (V(s2) != 0) {
            perror("V(s2)");
            break;
        }
    }

    /* clean up semaphores */
    if (semrm(s1) != 0) {
        perror("semrm(s1)");
    }
    if (semrm(s2) != 0) {
        perror("semrm(s2)");
    }

    return 0;
}
.fi
.SS Client program
\&
.nf
#include <stdio.h>
#include <errno.h>
#include <sem182.h>

int main(void)
{
    int s1 = semgrab(0xE1820);
    int s2 = semgrab(0xE1821);
    if (s1 == -1 || s2 == -1) {
        perror("semgrab");
        return 1;
    }

    for (;;) {
        if (P(s2) != 0) {
            if (errno == EINTR) {
                /* interrupted by syscall, try again */
                continue;
            }
            perror("P(s2)");
            break;
        }

        /* critical section here */

        if (V(s1) != 0) {
            perror("V(s1)");
            break;
        }
    }

    return 0;
}
.fi
.SH "SEE ALSO"
.BR ipcs (1),
.BR ipcrm (1),
.BR semctl (2),
.BR semget (2),
.BR semop (2),
.BR msem182 (3)
.SH COLOPHON
The
.I sem182
library was implemented by Guenther Leber, Heinz Kantz and Raimund
Kirner, with contributions from Peter Holzer, Gerhard J. Fohler and
possibly Gustav Pospischil. This manual page was written by
Ond\[u0159]ej Ho\[u0161]ek.
